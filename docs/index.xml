<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tópicos Avançados em Temas Aleatórios</title>
    <link>https://renanbirck.github.io/</link>
    <description>Recent content on Tópicos Avançados em Temas Aleatórios</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <copyright>2021 Renan Birck Pinheiro</copyright>
    <lastBuildDate>Tue, 13 Jul 2021 10:40:32 -0300</lastBuildDate>
    
        <atom:link href="https://renanbirck.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    
        <item>
        <title>Fazendo um roguelike simples: parte 1</title>
        <link>https://renanbirck.github.io/posts/fazendo-roguelike-pt1/</link>
        <pubDate>Tue, 13 Jul 2021 10:40:32 -0300</pubDate>
        
        <guid>https://renanbirck.github.io/posts/fazendo-roguelike-pt1/</guid>
        <description>Tópicos Avançados em Temas Aleatórios https://renanbirck.github.io/posts/fazendo-roguelike-pt1/ -&lt;p&gt;Como jogador de &lt;a href=&#34;https://nethack.org&#34;&gt;nethack&lt;/a&gt; que sou, paixão que descobri durante o trabalho em casa forçado pela covid, decidi que era hora de eu desenvolver meu próprio roguelike&amp;hellip; mas o que é um roguelike, você caro leitor pode estar se perguntando?&lt;/p&gt;
&lt;p&gt;A definição de &lt;em&gt;roguelike&lt;/em&gt; é um jogo com níveis gerados de forma procedural (isto é, por algoritmos e não de forma manual) e com morte permanente (morreu? que Deus o tenha); a maioria deles tem narrativa épica, mas isso não é um requisito do estilo em si e nem é preciso ser leitor desse gênero para apreciar os jogos. (eu mesmo comecei a ler &lt;em&gt;O Hobbit&lt;/em&gt;, mas dormi no meio).&lt;/p&gt;
&lt;p&gt;Dessa forma surgiram &lt;em&gt;roguelikes&lt;/em&gt; com temática pós-apocalipse (&lt;a href=&#34;https://cataclysmdda.org/&#34;&gt;Cataclysm: Dark Days Ahead&lt;/a&gt;), espaço (&lt;a href=&#34;https://store.steampowered.com/app/212680/FTL_Faster_Than_Light/&#34;&gt;FTL: Faster than Light&lt;/a&gt;) e simulação (&lt;a href=&#34;https://www.bay12games.com/dwarves/&#34;&gt;Dwarf Fortress&lt;/a&gt;) entre outros; mas o mais clássico é o &lt;a href=&#34;https://nethack.org&#34;&gt;nethack&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Neste projetinho de tutorial, vamos criar um &lt;em&gt;roguelike&lt;/em&gt; simples: você precisa descer alguns níveis, matar monstros e recuperar a Chave que permiti-lo-á sair da masmorra. O conteúdo desse tutorial foi adaptado &lt;a href=&#34;http://rogueliketutorials.com/tutorials/tcod/v2/part-1/&#34;&gt;daqui&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;A primeira parte irá colocar um personagem na tela e posteriormente irá movê-lo.&lt;/p&gt;
&lt;h3 id=&#34;1-instalando-as-bibliotecas&#34;&gt;1. Instalando as bibliotecas&lt;/h3&gt;
&lt;p&gt;Para desenvolver nosso &lt;em&gt;roguelike&lt;/em&gt;, vamos utilizar Python e a &lt;code&gt;libtcod&lt;/code&gt;. Esse tutorial presume que você usa um sistema operacional de verdade (leia-se: Linux, *BSD, macOS etc&amp;hellip;), mas talvez seja possível repeti-lo no Windows.&lt;/p&gt;
&lt;p&gt;Não queremos mexer nas bibliotecas do sistema, então vamos usar &lt;a href=&#34;https://docs.python.org/3/library/venv.html&#34;&gt;venv&lt;/a&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;python3 -m venv ~/src/minirogue   # Adaptar conforme a organização de diretórios do seu projeto.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Após, vamos criar um arquivo &lt;code&gt;requirements.txt&lt;/code&gt; para coordenar a instalação dos pacotes necessários. Crie um arquivo com o nome anteriormente referido e com as linhas:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;tcod&amp;gt;=11.13
numpy&amp;gt;=1.18
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;e, para instalar as dependências, bastará digitar &lt;code&gt;pip install -r requirements.txt&lt;/code&gt;. Se apareceu &lt;code&gt;successfully installed tcod-12.7.2&lt;/code&gt;, pronto. A partir daqui, iremos trabalhar dentro do &lt;code&gt;venv&lt;/code&gt; que criamos acima; portanto, ative ele digitando &lt;code&gt;source bin/activate&lt;/code&gt; dentro do diretório criado acima.&lt;/p&gt;
&lt;p&gt;Para nos certificarmos que a &lt;code&gt;libtcod&lt;/code&gt; instalou:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ python3
Python 3.9.6 (default, Jun 29 2021, 00:00:00) 
[GCC 11.1.1 20210531 (Red Hat 11.1.1-3)] on linux
Type &amp;quot;help&amp;quot;, &amp;quot;copyright&amp;quot;, &amp;quot;credits&amp;quot; or &amp;quot;license&amp;quot; for more information.
&amp;gt;&amp;gt;&amp;gt; import tcod
&amp;gt;&amp;gt;&amp;gt;  # não deverá acontecer nenhum erro.
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;15-preparação-baixar-um-arquivo-de-fontes&#34;&gt;1.5. Preparação: baixar um arquivo de fontes&lt;/h3&gt;
&lt;p&gt;Baixe o &lt;a href=&#34;http://rogueliketutorials.com/images/dejavu10x10_gs_tc.png&#34;&gt;arquivo&lt;/a&gt; e coloca na mesma pasta do projeto. Será necessário depois.&lt;/p&gt;
&lt;h3 id=&#34;2-colocando-nosso-personagem-na-tela&#34;&gt;2. Colocando nosso personagem na tela&lt;/h3&gt;
&lt;p&gt;Vamos criar um arquivo &lt;code&gt;main.py&lt;/code&gt;, com o conteúdo abaixo:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/env python3&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;# minirogue: a simple roguelike game for testing libtcod.&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;# (c) 2021- Renan Birck Pinheiro [renan.birck.pinheiro at Gmail&amp;#39;s &amp;#34;Google&amp;#34; mail service]&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;

    &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; tcod

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;():
        screen_width, screen_height &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;80&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# Altura da tela&lt;/span&gt;
        
        &lt;span style=&#34;color:#75715e&#34;&gt;# Carregar a fonte que anteriormente foi baixada no diretório atual.&lt;/span&gt;
        tileset &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; tcod&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;tileset&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;load_tilesheet(
            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;dejavu10x10_gs_tc.png&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, tcod&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;tileset&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;CHARMAP_TCOD
        )
        
        &lt;span style=&#34;color:#75715e&#34;&gt;# Criar a interface...&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; tcod&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;context&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new_terminal(screen_width, screen_height, tileset&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;tileset,
                                    title&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MiniRogue&amp;#34;&lt;/span&gt;, vsync&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; context:
            root_console &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; tcod&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Console(screen_width, screen_height, order&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;F&amp;#34;&lt;/span&gt;)
            &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;:
                &lt;span style=&#34;color:#75715e&#34;&gt;# Desenhar a tela, até a hora em que PEDIR PRA SAIR&lt;/span&gt;
                root_console&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;print(x&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, y&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, string&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@&amp;#34;&lt;/span&gt;)
                context&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;present(root_console)
                &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; event &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; tcod&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;event&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;wait():
                    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; event&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;type &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;QUIT&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#75715e&#34;&gt;# PEDIU PRA SAIR&lt;/span&gt;
                        &lt;span style=&#34;color:#66d9ef&#34;&gt;raise&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;SystemExit&lt;/span&gt;()

    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; __name__ &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;__main__&amp;#34;&lt;/span&gt;:
        main()&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Vamos explicar, em linhas gerais:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;screen_width, screen_height&lt;/code&gt; são as dimensões da tela (no caso, 80x50).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tileset&lt;/code&gt; recebe o arquivo de ícones (ou, no nosso caso, a fonte a ser usada).&lt;/li&gt;
&lt;li&gt;Após, é inicializado um terminal e um console nas dimensões acima definidas.&lt;/li&gt;
&lt;li&gt;O &lt;em&gt;loop&lt;/em&gt; principal lê o teclado, toma a ação e atualiza a tela.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;3-movendo-nosso-personagem&#34;&gt;3. Movendo nosso personagem&lt;/h3&gt;
&lt;p&gt;TODO: escrever esse trem aqui.&lt;/p&gt;
- https://renanbirck.github.io/posts/fazendo-roguelike-pt1/ - 2021 Renan Birck Pinheiro</description>
        </item>
    
    
    
        <item>
        <title>Como eu blogo?</title>
        <link>https://renanbirck.github.io/posts/como-eu-blogo/</link>
        <pubDate>Mon, 03 May 2021 15:42:30 -0300</pubDate>
        
        <guid>https://renanbirck.github.io/posts/como-eu-blogo/</guid>
        <description>Tópicos Avançados em Temas Aleatórios https://renanbirck.github.io/posts/como-eu-blogo/ -&lt;h1 id=&#34;como-eu-blogo&#34;&gt;Como eu blogo?&lt;/h1&gt;
&lt;p&gt;&lt;img src=&#34;https://renanbirck.github.io/images/typewriter.jpg&#34; alt=&#34;typewriter&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://gohugo.io&#34;&gt;Chamando o Hugo&lt;/a&gt;. Dessa forma, consigo escrever documentos em qualquer editor de texto.
Após escrever o texto, eu executo o &lt;code&gt;hugo&lt;/code&gt; e verifico o resultado. Se satisfeito, basta um &lt;code&gt;commit&lt;/code&gt; e um &lt;code&gt;push&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Um projeto futuro para um dia chuvoso é automatizar o processo, utilizando &lt;a href=&#34;https://github.com/features/actions&#34;&gt;GitHub Actions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Foto: &lt;a href=&#34;https://unsplash.com/@wilhelmgunkel&#34;&gt;Wilhelm Gunkel&lt;/a&gt;/&lt;a href=&#34;https://unsplash.com/s/photos/typewriter&#34;&gt;Unsplash&lt;/a&gt;&lt;/p&gt;
- https://renanbirck.github.io/posts/como-eu-blogo/ - 2021 Renan Birck Pinheiro</description>
        </item>
    
    
    
        <item>
        <title>Olá mundo!</title>
        <link>https://renanbirck.github.io/posts/hello-world/</link>
        <pubDate>Mon, 03 May 2021 15:40:32 -0300</pubDate>
        
        <guid>https://renanbirck.github.io/posts/hello-world/</guid>
        <description>Tópicos Avançados em Temas Aleatórios https://renanbirck.github.io/posts/hello-world/ -&lt;p&gt;Olá mundo!&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://renanbirck.github.io/images/nethack.png&#34; alt=&#34;Imagem de teste&#34;&gt; Figura 1: blá blá blá.&lt;/p&gt;
&lt;p&gt;$ \frac{d}{dx} \sin(x) = \cos(x) $&lt;/p&gt;
- https://renanbirck.github.io/posts/hello-world/ - 2021 Renan Birck Pinheiro</description>
        </item>
    
    
  </channel>
</rss> 